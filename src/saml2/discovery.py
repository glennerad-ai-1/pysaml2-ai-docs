"""Helpers that implement the IdP Discovery Service flow.

The module provides the :class:`DiscoveryServer` which can parse and verify
Discovery Service requests generated by Service Providers and issue
appropriate redirect responses back to them.  The logic complements the
identity provider server component by handling the optional SAML IdP discovery
profile.
"""

from urllib import parse

from saml2.entity import Entity
from saml2.response import VerificationError


__author__ = "rolandh"

IDPDISC_POLICY = "urn:oasis:names:tc:SAML:profiles:SSO:idp-discovery-protocol:single"


class DiscoveryServer(Entity):
    """Implement the IdP Discovery profile endpoints for an entity.

    The discovery server exposes helper methods for parsing incoming discovery
    requests, validating that they conform to the expectations of the SAML
    profile and constructing responses that redirect the browser back to a
    Service Provider.
    """

    def __init__(self, config=None, config_file=""):
        """Initialise the discovery server with the given configuration.

        :param config: Optional configuration object used to configure the
            parent :class:`Entity`.
        :param config_file: Path to a configuration file that should be loaded
            when ``config`` is not supplied.
        """

        if config or config_file:
            Entity.__init__(self, "disco", config, config_file)

    def parse_discovery_service_request(self, url="", query=""):
        """Parse and validate an incoming discovery service request.

        :param url: Full discovery service request URL including the query
            string.
        :param query: Raw query component when ``url`` is not already provided.
        :return: Normalised mapping of discovery service request parameters
            with single string values.
        :raises Exception: If a parameter contains duplicate values or violates
            the discovery service semantics.
        :raises VerificationError: If the mandatory ``return`` parameter is
            missing.
        :raises ValueError: If the ``isPassive`` flag is not ``"true"`` or
            ``"false"``.
        """

        if url:
            part = parse.urlparse(url)
            dsr = parse.parse_qs(part[4])
        elif query:
            dsr = parse.parse_qs(query)
        else:
            dsr = {}

        for key in ["isPassive", "return", "returnIDParam", "policy", "entityID"]:
            try:
                if len(dsr[key]) != 1:
                    raise Exception(f"Invalid DS request keys: {key}")
                dsr[key] = dsr[key][0]
            except KeyError:
                pass

        if "return" in dsr:
            part = parse.urlparse(dsr["return"])
            if part.query:
                qp = parse.parse_qs(part.query)
                if "returnIDParam" in dsr:
                    if dsr["returnIDParam"] in qp.keys():
                        raise Exception("returnIDParam value should not be in the query params")
                else:
                    if "entityID" in qp.keys():
                        raise Exception("entityID should not be in the query params")
        else:
            raise VerificationError("Missing mandatory parameter 'return'")

        if "policy" not in dsr:
            dsr["policy"] = IDPDISC_POLICY

        is_passive = dsr.get("isPassive")
        if is_passive not in ["true", "false"]:
            raise ValueError(f"Invalid value '{is_passive}' for attribute 'isPassive'")

        if "isPassive" in dsr and dsr["isPassive"] == "true":
            dsr["isPassive"] = True
        else:
            dsr["isPassive"] = False

        if "returnIDParam" not in dsr:
            dsr["returnIDParam"] = "entityID"

        return dsr

    @staticmethod
    def create_discovery_service_response(return_url=None, returnIDParam="entityID", entity_id=None, **kwargs):
        """Construct the redirect response for a Discovery Service request.

        :param return_url: Endpoint supplied in the discovery request that the
            user should be redirected back to.
        :param returnIDParam: Query-string parameter name that the Service
            Provider expects for the chosen IdP identifier.
        :param entity_id: The identifier of the selected IdP to append to the
            return URL when available.
        :param kwargs: Additional parameters that may contain ``return`` when
            ``return_url`` is omitted.
        :return: The redirect URL that should be returned to the user agent.
        """

        if return_url is None:
            return_url = kwargs["return"]

        if entity_id:
            qp = parse.urlencode({returnIDParam: entity_id})

            part = parse.urlparse(return_url)
            if part.query:
                return_url = f"{return_url}&{qp}"
            else:
                return_url = f"{return_url}?{qp}"

        return return_url

    def verify_sp_in_metadata(self, entity_id):
        """Check whether the Service Provider exists in the metadata store.

        :param entity_id: EntityID of the Service Provider being validated.
        :return: ``True`` when discovery response endpoints are published in
            metadata, otherwise ``False``.
        """

        if self.metadata:
            endp = self.metadata.discovery_response(entity_id)
            if endp:
                return True

        return False

    def verify_return(self, entity_id, return_url):
        """Verify that the return URL is allowed for the Service Provider.

        :param entity_id: EntityID of the Service Provider that issued the
            discovery request.
        :param return_url: URL that the Service Provider requested the user
            should be redirected to.
        :return: ``True`` if the URL fails to match one of the discovery
            response locations published in metadata, otherwise ``False``.
        """

        for endp in self.metadata.discovery_response(entity_id):
            if not return_url.startswith(endp["location"]):
                return True
        return False
